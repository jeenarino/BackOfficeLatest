//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CheckinPortal.BackOffice.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PortalDBEntities : DbContext
    {
        public PortalDBEntities()
            : base("name=PortalDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbCardDetail> tbCardDetails { get; set; }
        public virtual DbSet<tbCardTypeMaster> tbCardTypeMasters { get; set; }
        public virtual DbSet<tbCountryMaster> tbCountryMasters { get; set; }
        public virtual DbSet<tbDepositDetail> tbDepositDetails { get; set; }
        public virtual DbSet<tbDocumentMaster> tbDocumentMasters { get; set; }
        public virtual DbSet<tbFeedBackResult> tbFeedBackResults { get; set; }
        public virtual DbSet<tbMenuItem> tbMenuItems { get; set; }
        public virtual DbSet<tbModule> tbModules { get; set; }
        public virtual DbSet<tbPaymentTypeMaster> tbPaymentTypeMasters { get; set; }
        public virtual DbSet<tbProfileDetail> tbProfileDetails { get; set; }
        public virtual DbSet<tbProfileDocument> tbProfileDocuments { get; set; }
        public virtual DbSet<tbQuestionMaster> tbQuestionMasters { get; set; }
        public virtual DbSet<tbRequestDetail> tbRequestDetails { get; set; }
        public virtual DbSet<tbRequestTypeMaster> tbRequestTypeMasters { get; set; }
        public virtual DbSet<tbReservationDocumentTypeMaster> tbReservationDocumentTypeMasters { get; set; }
        public virtual DbSet<tbReservationRateDetail> tbReservationRateDetails { get; set; }
        public virtual DbSet<tbRoleMaster> tbRoleMasters { get; set; }
        public virtual DbSet<tbUserMaster> tbUserMasters { get; set; }
        public virtual DbSet<tbReservationDocument> tbReservationDocuments { get; set; }
        public virtual DbSet<tbStateMaster> tbStateMasters { get; set; }
        public virtual DbSet<tbPackageMaster> tbPackageMasters { get; set; }
        public virtual DbSet<tbAuditheader> tbAuditheaders { get; set; }
        public virtual DbSet<tbKeyStorageManagement> tbKeyStorageManagements { get; set; }
        public virtual DbSet<tbReservationPackageDetail> tbReservationPackageDetails { get; set; }
        public virtual DbSet<tbReservationDetail> tbReservationDetails { get; set; }
    
        public virtual int Usp_BulkUpdateLocallyPushedReservations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_BulkUpdateLocallyPushedReservations");
        }
    
        public virtual ObjectResult<usp_FetchReservationforCloudPush_Result> usp_FetchReservationforCloudPush()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FetchReservationforCloudPush_Result>("usp_FetchReservationforCloudPush");
        }
    
        public virtual ObjectResult<Usp_GetRequestDetails_Result> Usp_GetRequestDetails(Nullable<bool> status, Nullable<int> reqDetailId, Nullable<int> reservationDetailID)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var reqDetailIdParameter = reqDetailId.HasValue ?
                new ObjectParameter("ReqDetailId", reqDetailId) :
                new ObjectParameter("ReqDetailId", typeof(int));
    
            var reservationDetailIDParameter = reservationDetailID.HasValue ?
                new ObjectParameter("ReservationDetailID", reservationDetailID) :
                new ObjectParameter("ReservationDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetRequestDetails_Result>("Usp_GetRequestDetails", statusParameter, reqDetailIdParameter, reservationDetailIDParameter);
        }
    
        public virtual ObjectResult<usp_GetReservationListDetails_Result> usp_GetReservationListDetails(Nullable<int> reservationID)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReservationListDetails_Result>("usp_GetReservationListDetails", reservationIDParameter);
        }
    
        public virtual ObjectResult<usp_GetReservationListDocumentsDetails_Result> usp_GetReservationListDocumentsDetails(Nullable<int> reservationID)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReservationListDocumentsDetails_Result>("usp_GetReservationListDocumentsDetails", reservationIDParameter);
        }
    
        public virtual ObjectResult<Usp_InsertFeedbackData_Result> Usp_InsertFeedbackData(Nullable<int> reservationID, Nullable<int> questionID, string answer)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_InsertFeedbackData_Result>("Usp_InsertFeedbackData", reservationIDParameter, questionIDParameter, answerParameter);
        }
    
        public virtual int usp_InsertReservationDetails(Nullable<bool> isCloud)
        {
            var isCloudParameter = isCloud.HasValue ?
                new ObjectParameter("IsCloud", isCloud) :
                new ObjectParameter("IsCloud", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReservationDetails", isCloudParameter);
        }
    
        public virtual int usp_InsertReservatinFeedbackDetails(Nullable<bool> isCloud)
        {
            var isCloudParameter = isCloud.HasValue ?
                new ObjectParameter("IsCloud", isCloud) :
                new ObjectParameter("IsCloud", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReservatinFeedbackDetails", isCloudParameter);
        }
    
        public virtual int usp_InsertReservationPackageDetails(Nullable<bool> isCloud)
        {
            var isCloudParameter = isCloud.HasValue ?
                new ObjectParameter("IsCloud", isCloud) :
                new ObjectParameter("IsCloud", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReservationPackageDetails", isCloudParameter);
        }
    
        public virtual ObjectResult<usp_ApproveRequest_Result> usp_ApproveRequest(Nullable<int> requestDetailID, Nullable<bool> status, string comments, Nullable<int> userID, Nullable<bool> isApprove)
        {
            var requestDetailIDParameter = requestDetailID.HasValue ?
                new ObjectParameter("RequestDetailID", requestDetailID) :
                new ObjectParameter("RequestDetailID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isApproveParameter = isApprove.HasValue ?
                new ObjectParameter("IsApprove", isApprove) :
                new ObjectParameter("IsApprove", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ApproveRequest_Result>("usp_ApproveRequest", requestDetailIDParameter, statusParameter, commentsParameter, userIDParameter, isApproveParameter);
        }
    
        public virtual int usp_InsertReservationDocumentDetails(Nullable<bool> isCloud)
        {
            var isCloudParameter = isCloud.HasValue ?
                new ObjectParameter("IsCloud", isCloud) :
                new ObjectParameter("IsCloud", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertReservationDocumentDetails", isCloudParameter);
        }
    
        public virtual ObjectResult<usp_GetReservationDocuments_Result> usp_GetReservationDocuments(Nullable<int> reservationID)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReservationDocuments_Result>("usp_GetReservationDocuments", reservationIDParameter);
        }
    
        public virtual ObjectResult<Usp_FeedbackData_Result> Usp_FeedbackData(Nullable<int> reservationID)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_FeedbackData_Result>("Usp_FeedbackData", reservationIDParameter);
        }
    
        public virtual int CloseKeys()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloseKeys");
        }
    
        public virtual int OpenKeys()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OpenKeys");
        }
    
        public virtual ObjectResult<Usp_ClearData_Result> Usp_ClearData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_ClearData_Result>("Usp_ClearData");
        }
    
        public virtual int Usp_GetReservationStatusLocal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_GetReservationStatusLocal");
        }
    
        public virtual int Usp_InsertAudit(string auditModule, Nullable<int> userID)
        {
            var auditModuleParameter = auditModule != null ?
                new ObjectParameter("AuditModule", auditModule) :
                new ObjectParameter("AuditModule", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_InsertAudit", auditModuleParameter, userIDParameter);
        }
    
        public virtual int usp_PurgeProfileInformation(string reservationNumber)
        {
            var reservationNumberParameter = reservationNumber != null ?
                new ObjectParameter("ReservationNumber", reservationNumber) :
                new ObjectParameter("ReservationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PurgeProfileInformation", reservationNumberParameter);
        }
    
        public virtual int Usp_SyncCountryCodesFromPMS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_SyncCountryCodesFromPMS");
        }
    
        public virtual ObjectResult<Usp_GetProfileDocumentsByReservationID_Result> Usp_GetProfileDocumentsByReservationID(Nullable<int> reservationDetailID)
        {
            var reservationDetailIDParameter = reservationDetailID.HasValue ?
                new ObjectParameter("ReservationDetailID", reservationDetailID) :
                new ObjectParameter("ReservationDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetProfileDocumentsByReservationID_Result>("Usp_GetProfileDocumentsByReservationID", reservationDetailIDParameter);
        }
    
        public virtual ObjectResult<Usp_GetProfileInformationByReservationID_Result> Usp_GetProfileInformationByReservationID(Nullable<int> reservationDetailID)
        {
            var reservationDetailIDParameter = reservationDetailID.HasValue ?
                new ObjectParameter("ReservationDetailID", reservationDetailID) :
                new ObjectParameter("ReservationDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetProfileInformationByReservationID_Result>("Usp_GetProfileInformationByReservationID", reservationDetailIDParameter);
        }
    
        public virtual int Usp_SwapProfileDetails(Nullable<int> fromProfileDetailID, Nullable<int> toProfileDetailID)
        {
            var fromProfileDetailIDParameter = fromProfileDetailID.HasValue ?
                new ObjectParameter("FromProfileDetailID", fromProfileDetailID) :
                new ObjectParameter("FromProfileDetailID", typeof(int));
    
            var toProfileDetailIDParameter = toProfileDetailID.HasValue ?
                new ObjectParameter("ToProfileDetailID", toProfileDetailID) :
                new ObjectParameter("ToProfileDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_SwapProfileDetails", fromProfileDetailIDParameter, toProfileDetailIDParameter);
        }
    
        public virtual int Usp_UpdateProfileDocumentInformation(Nullable<int> profileDocID, Nullable<int> documentMasterID, string documentNumber, Nullable<System.DateTime> expiryDate, Nullable<System.DateTime> issueDate, byte[] documentImage1, byte[] documentImage2, byte[] documentImage3, byte[] faceImage, string issueCountry)
        {
            var profileDocIDParameter = profileDocID.HasValue ?
                new ObjectParameter("ProfileDocID", profileDocID) :
                new ObjectParameter("ProfileDocID", typeof(int));
    
            var documentMasterIDParameter = documentMasterID.HasValue ?
                new ObjectParameter("DocumentMasterID", documentMasterID) :
                new ObjectParameter("DocumentMasterID", typeof(int));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var documentImage1Parameter = documentImage1 != null ?
                new ObjectParameter("DocumentImage1", documentImage1) :
                new ObjectParameter("DocumentImage1", typeof(byte[]));
    
            var documentImage2Parameter = documentImage2 != null ?
                new ObjectParameter("DocumentImage2", documentImage2) :
                new ObjectParameter("DocumentImage2", typeof(byte[]));
    
            var documentImage3Parameter = documentImage3 != null ?
                new ObjectParameter("DocumentImage3", documentImage3) :
                new ObjectParameter("DocumentImage3", typeof(byte[]));
    
            var faceImageParameter = faceImage != null ?
                new ObjectParameter("FaceImage", faceImage) :
                new ObjectParameter("FaceImage", typeof(byte[]));
    
            var issueCountryParameter = issueCountry != null ?
                new ObjectParameter("IssueCountry", issueCountry) :
                new ObjectParameter("IssueCountry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateProfileDocumentInformation", profileDocIDParameter, documentMasterIDParameter, documentNumberParameter, expiryDateParameter, issueDateParameter, documentImage1Parameter, documentImage2Parameter, documentImage3Parameter, faceImageParameter, issueCountryParameter);
        }
    
        public virtual int Usp_UpdateProfileInformation(Nullable<int> profileDetailID, string email, string phone, Nullable<int> nationality, string addressLine1, string addressLine2, Nullable<int> stateMasterID, string postalCode, string gender, Nullable<int> countryMasterID, string city, string countryofResidence)
        {
            var profileDetailIDParameter = profileDetailID.HasValue ?
                new ObjectParameter("ProfileDetailID", profileDetailID) :
                new ObjectParameter("ProfileDetailID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var stateMasterIDParameter = stateMasterID.HasValue ?
                new ObjectParameter("StateMasterID", stateMasterID) :
                new ObjectParameter("StateMasterID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var countryMasterIDParameter = countryMasterID.HasValue ?
                new ObjectParameter("CountryMasterID", countryMasterID) :
                new ObjectParameter("CountryMasterID", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryofResidenceParameter = countryofResidence != null ?
                new ObjectParameter("CountryofResidence", countryofResidence) :
                new ObjectParameter("CountryofResidence", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateProfileInformation", profileDetailIDParameter, emailParameter, phoneParameter, nationalityParameter, addressLine1Parameter, addressLine2Parameter, stateMasterIDParameter, postalCodeParameter, genderParameter, countryMasterIDParameter, cityParameter, countryofResidenceParameter);
        }
    
        public virtual ObjectResult<usp_GetReservationList_Result> usp_GetReservationList(string statusType, string reportDate, Nullable<int> pageNumber, Nullable<int> pageSize, string search, string sort, string sortBy)
        {
            var statusTypeParameter = statusType != null ?
                new ObjectParameter("StatusType", statusType) :
                new ObjectParameter("StatusType", typeof(string));
    
            var reportDateParameter = reportDate != null ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetReservationList_Result>("usp_GetReservationList", statusTypeParameter, reportDateParameter, pageNumberParameter, pageSizeParameter, searchParameter, sortParameter, sortByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetReservationListCount(string statusType, string reportDate, string search)
        {
            var statusTypeParameter = statusType != null ?
                new ObjectParameter("StatusType", statusType) :
                new ObjectParameter("StatusType", typeof(string));
    
            var reportDateParameter = reportDate != null ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetReservationListCount", statusTypeParameter, reportDateParameter, searchParameter);
        }
    }
}
